[{"title":"怎样才能避免熬夜和赖床","url":"/2020/06/26/怎样才能避免熬夜和赖床/","content":"\n要避免熬夜和赖床，首先要判断自己是否熬夜和赖床。\n## 判定自己是否熬夜和赖床\n要判断自己是否熬夜和赖床，首先要明确它们的定义。在写这篇文章之前，感觉自己好想知道，但认真琢磨过后发现知道其实是错觉，就像[奥古斯丁](https://en.wikipedia.org/wiki/Augustine_of_Hippo)所说，\n> What then is time? If no one asks me, I know what it is. If I wish to explain it to him who asks, I do not know.\n> 我知道时间是什么,如果你不问我的话,但如果你问我,时间是什么?我便不知道了。\n \n把熬夜翻译成 ‘Stay up late’，在谷歌没有找到相关内容，在维基百科也没有找到相关内容，这时我意识到英文的世界里是没有熬夜这个概念的，而我们之所以有这个概念是因为我们有中医，就像‘上火’一样。但是，我以‘熬夜’为关键词，给出熬夜定义的内容比较少。其中百度百科的定义是：指忍受困乏，彻夜或深夜不睡觉就称之为熬夜。阅读过张遇升的《怎样获得高质量睡眠》，知道每个人睡眠节律是不一样的，所以每个人入睡的时间也不一样。根据以上的内容并结合自己的思考，我得出下面熬夜的定义。\n> 在到了符合自己睡眠节律的入睡时间，忍受困乏，彻夜或深夜不睡觉就称之为熬夜\n\n而赖床的定义就比较简单了，百度百科给出的定义是\n> 赖床，是指由于各种原因，早上醒来却不愿意起床，喜欢在床上多躺一会儿的行为，通常被叫做赖床。\n\n\n有了这两个定义，就很容易判断了，首先，确定自己的睡眠节律，下面是《怎样获得高质量睡眠》这门课中判断自己睡眠节律的方法\n> 你可以找休闲的一天，比如周末。你可以按照喜欢的方式，安排一天的生活，比如出去走一走，逛逛公园、爬爬山，看个电影，做个按摩，让自己放松下来，不要做特别刺激或者挑战的事。然后有意识地注意一下你在晚上什么时间会开始觉得困，然后在那个时点上床睡觉。不要给自己任何的压力，睡到自然醒。然后记录下整个的时长和节律。\n\n接着就是根据自己的睡眠节律确定自己是否熬夜和懒床。假如自己的睡眠节律是11点睡觉，7点起床，如果11点时候没睡那就是在熬夜了，而到了7点闹钟响了没有立即起来，自己就是在赖床了。\n\n## 这样能避免熬夜和赖床\n1. 不赖床从不熬夜开始\n    要解决赖床的问题，最关键的是不熬夜，睡够了自然就能起来了。\n    \n1. 把手机放在自己够不到的地方\n    睡觉的时候，如果手机放在床头或其他自己够得着的地方，自己很容易会不由自主拿起手机来看，一个闪念，一则通知，都有可能使你拿起手机。由于手机屏幕对人体的刺激作用，在加上手机内容的刺激，使得疲惫的大脑越发精神，特别是在刚开始决定不熬夜的时候。\n\n1. 关闭通知\n在床上的时候，很容易因为通知而拿起手机，况且现在的通知不止一则，各种震惊，各种99.99%。尽量把这些垃圾通知都关闭，如果实在有不能关的通知或者懒得关，可以开启手机指定时间的夜间勿扰模式。\n\n1. 利用他律\n理想很丰满，现实很骨感，由于各种原因很难保证不赖床，所以我想了个办法，这个方法有点特殊，可以试试，很简单，我睡上铺，桌子在下面，晚上11点半的时候我就把手机丢在桌上，早上的时候，由于闹钟响了，不想吵到舍友，但手机又在床下，我够不着，所以就必须下床，在下床关闹钟的时候，自然也就起来了。\n\n1. 路由器设置为自动断网\n可以买一个能在指定时间断网的路由器，像小米，华为等的路由器都有类似的功能，如果家里有这样的路由器，把这个功能用起来，当自己在刷视频忘记时间时，断网就可以在我们沉浸在视频海洋里，忘记时间时，拉我们一把。\n\n1. 用软件打败软件\n现在导致我们晚睡的东西主要是电子产品，因为这些东西本来设计出来就是为了吸引注意了，所以人很难通过自己的自觉来控制自己不玩，所以想到的办法就是用电子产品去打败电子产品。有了这个想法，我就去 App Store 上搜，果然找到了我想要的软件，那就是 [Sleep Town](https://sleeptown.seekrtech.com/)。\n\n<iframe src=\"//player.bilibili.com/player.html?aid=711216821&bvid=BV1cD4y1S72r&cid=206124138&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"600\" > </iframe>\n\n这是一个把睡觉游戏化的软件。根据你的睡眠节律设置好入睡时间和起床时间。要睡觉的时候软件会触发弹窗通知，提醒你该睡觉了，这时点击入睡按钮，就可以在软件里面开始建房子，这个过程中退出软件，查看其他软件，房子都会被摧毁，因为不想房子被摧毁，就乖乖去睡觉了。到了起床时间，它会触发闹钟，这个闹钟和平常的闹钟不太一样，它只会响5分钟，在这5种内如果没有起床，快要建成的建筑物就会被摧毁，而且起来后，摇很多下手机，只有把进度条摇满了才算起床成功，这样的软件设计使得熬夜和赖床离我而去。当然你也可以试试其他软件。\n\n## 参考文献\n1. [张遇升.怎样获得高质量睡眠](https://www.biji.com/pwa/#/course/jvwNqE9ZL10K4E0sq7VG7Pp8mDnRWo)\n2. [百度百科.熬夜](https://baike.baidu.com/item/%E7%86%AC%E5%A4%9C/2802)\n3. [百度百科.赖床](https://baike.baidu.com/item/%E8%B5%96%E5%BA%8A/3092000#:~:text=%E8%B5%96%E5%BA%8A%EF%BC%8C%E6%98%AF%E6%8C%87%E7%94%B1%E4%BA%8E,5%E5%88%86%E9%92%9F%E8%82%AF%E5%AE%9A%E6%B2%A1%E9%97%AE%E9%A2%98%E3%80%82)"},{"title":"Bingo 就业管理系统","url":"/2020/06/08/Bingo-就业管理系统/","content":"项目演示：\n> [www.bingo.wisyoong.com](http://www.bingo.wisyoong.com)\n","tags":["巨制","Java","Tomcat","JSP","HTML","JS"]},{"title":"topic:refs/remotes/origin/topic 报错","url":"/2020/05/31/在《pro git》引用格式推送这节中出现-topic-refs-remotes-origin-topic-报错/","content":"## 出现的问题\n在《Pro Git》 --- 引用格式推送 这一小节中，有下面的命令和输出结果\n```sh\n git fetch origin master:refs/remotes/origin/mymaster \\\n\t topic:refs/remotes/origin/topic\nFrom git@github.com:schacon/simplegit\n ! [rejected]        master     -> origin/mymaster  (non fast forward)\n * [new branch]      topic      -> origin/topic\n```\n但是自己在终端输入\n```sh\n git fetch origin master:refs/remotes/origin/mymaster \\ topic:refs/remotes/origin/topic\n```\n却并没有出现和上面一样的结果，而是输出如下错误\n```sh\nfatal: invalid refspec ' topic:refs/remotes/origin/topic'\n```\n\n## 解决的办法\n因为在 shell 命令中 `\\` 表示换行继续输入的意思，也就是当命令太长的时候，可以用  `\\` 对命令进行分割，转为下一行继续输入,而并不是 `git fetch` 命令用来分割参数的分割符。下面是正确的操作示范\n\n1. 如果输入命令时不想换行，输入的时候把 ``\\`` 去掉，如下\n\t```sh\n\tgit fetch origin master:refs/remotes/origin/mymaster topic:refs/remotes/origin/topic\n\t```\n2. 如果输入命令时觉得命令太长，想换行，就可以先输入\n\t```sh\n\tgit fetch origin master:refs/remotes/origin/mymaster \\\n\t```\n\t按下 Enter 键，换行继续输入\n\t```sh\n\ttopic:refs/remotes/origin/topic\n\t```\n用以上两种中任意一个输入方式，就可以得到书中一样的结果了。\n\n","tags":["Pro Git","Git","shell","引用规格"]},{"title":"Git 合并子模块改动没有出现 ‘merge following commits not found’","url":"/2020/05/15/Git-合并子模块改动没有出现-‘merge-following-commits-not-found’/","content":"\n## 出现的问题\n在《Pro Git》的第7章11节—— *合并子模块改动* 中，输入`git pull` 命令，并没有出现如下书中的结果\n```sh\n$ git pull\nremote: Counting objects: 2, done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 2 (delta 1), reused 2 (delta 1)\nUnpacking objects: 100% (2/2), done.\nFrom https://github.com/chaconinc/MainProject\n   9a377d1..eb974f8  master     -> origin/master\nFetching submodule DbConnector\nwarning: Failed to merge submodule DbConnector (merge following commits not found)\nAuto-merging DbConnector\nCONFLICT (submodule): Merge conflict in DbConnector\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n而是出现下面的内容，\n```sh\n$ git pull\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 2 (delta 0), reused 2 (delta 0), pack-reused 0\nUnpacking objects: 100% (2/2), done.\nFrom https://github.com/username/MainProject\n   faf7642..f3561d9  master     -> origin/master\nFetching submodule DbConnector\nFrom https://github.com/username/DbConnector\n   42c390a..1a5f567  master     -> origin/master\nUpdating faf7642..f3561d9\nFast-forward\n DbConnector | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n此结果中并没有出现 `merge following commits not found`，再查看子模块，发现远程分支与本地分支并没有产生冲突，而是分叉了\n```sh\n$ graph\n* a88a3be (HEAD -> master) add return 0;\n| * 1a5f567 (origin/master, origin/HEAD) add return 1;\n|/\n* 42c390a first commit\n```\n\n## 解决的办法\n出现这个问题的原因是，没有在主项目中，提交子模块的修改。下面就来具体演示一下如何复现书本上的内容。新建一个 MainProject 文件夹，在里面新建一个 main.c 文件，在该文件中输入\n```c\n#inclue<stdio.h>\nint main(){\n\n}\n```\n然后把 MainProject 文件夹初始化为 git 项目\n```sh\n$ git init\nInitialized empty Git repository in /Users/apple/Git/MainProject/.git/\n\n$ git add main.c\n\n$ git commit -m 'first commit'\n[master (root-commit) 15a113b] first commit\n 1 file changed, 4 insertions(+)\n create mode 100644 main.c\n```\n新建一个 DbConnector 文件夹，在里面新建一个 connector.c在该文件中输入\n```c\n#include<stdio.h>\nint main(){\n    printf(\"DbConnector\");\n}\n```\n初始化为 git 项目\n```sh\n$ git init\nInitialized empty Git repository in /Users/apple/Git/DbConnector/.git/\n\n$ git add connector.c\n\n$ git commit -m 'first commit'\n[master (root-commit) 42c390a] first commit\n 1 file changed, 4 insertions(+)\n create mode 100644 main.c\n```\n在 Github 中新建一个 DbConnector 的仓库，把本地的内容推送上去\n```sh\n$ git remote add origin https://github.com/username/DbConnector.git\n\n$ git push -u origin master\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 262 bytes | 262.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/username/DbConnector.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n回到 MainProject，给它添加子模块，并提交\n```sh\n$ git submodule add https://github.com/username/DbConnector.git\nCloning into '/Users/apple/Documents/Git/MainProject/DbConnector'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\n\n$ git commit -m 'add submodule'\n[master faf7642] add submodule\n 2 files changed, 4 insertions(+)\n create mode 100644 .gitmodules\n create mode 160000 DbConnector\n```\n\n在 Github中新建一个 MainProject 仓库，把本地的内容推送上去\n```sh\n$ git remote add origin https://github.com/username/MainProject.git\n\n$ git push -u origin master\nEnumerating objects: 6, done.\nCounting objects: 100% (6/6), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 595 bytes | 595.00 KiB/s, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo https://github.com/username/MainProject.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n\n在 *本机的其它文件夹* 或 *别的计算机* 中克隆 MainProject\n```sh\n$ git clone --recursive https://github.com/username/MainProject.git\nCloning into 'MainProject'...\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 6 (delta 0), reused 6 (delta 0), pack-reused 0\nUnpacking objects: 100% (6/6), done.\nSubmodule 'DbConnector' (https://github.com/username/DbConnector.git) registered for path 'DbConnector'\nCloning into '/Users/apple/Downloads/MainProject/DbConnector'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\nSubmodule path 'DbConnector': checked out '42c390a15689a128dd017f1ca38b267af1c206c8'\n```\n现在我们有了两个 MainProject，一个是原本的，一个是克隆的，目前两个仓库里的内容是一模一样的，现在让它们的分支产生分叉。来到克隆过后的 MainProject 里的子模块 DbConnector\n```sh\ngit checkout master\n```\n\n在代码中添加`return 0;`，如下\n```sh\n#include<stdio.h>\nint main(){\n    printf(\"DbConnector\");\n    return 0;\n}\n```\n并在子模块中提交\n```sh\n$ git commit -am 'add return 0;'\n[master 24cfc12] add return 0;\n 1 file changed, 1 insertion(+)\n```\n下面是解决问题的关键！关键！关键！重要的事情说三遍！首先切换回克隆的主项目目录\n```sh\n$ cd ..\n```\n运行`git status`我们可以看到我们的修改\n```sh\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   DbConnector (new commits)\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n我们必须把在子项目修改的内容在主项目再提交一次\n```sh\n$ git commit -am 'add return 0;'\n[master febe029] add return 0;\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n\n如果没有提交，当下面使用 `git pull`命令时，提示信息就不会出现 `merge following commits not found`,就不会输出和书上一样的结果。现在回到原本的 MainProject 中的子模块，添加与克隆的项目的子模块不一样的提交，如下\n```c\n#include<stdio.h>\nint main(){\n    printf(\"DbConnector\");\n    return 1;\n}\n```\n在子模块中提交该修改\n```sh\n$ git commit -am 'add return 1;'\n[master 1a5f567] add return 1;\n 1 file changed, 1 insertion(+)\n```\n回到原本的 MainProject 中，把当前的主项目和子模块的提交推向远程分支，使远程分支与克隆过后的分支产生分叉。在 connector.c 文件中添加 `return 1;`\n```sh\n$ cd ..\n\n$ git commit -am 'add return 1;'\n[master 524639a] add return1;\n 1 file changed, 1 insertion(+)\n \n$ git push --recurse-submodules=on-demand\nPushing submodule 'DbConnector'\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 303 bytes | 303.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/username/DbConnector.git\n   42c390a..1a5f567  master -> master\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 302 bytes | 302.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0)\nTo https://github.com/username/MainProject.git\n   faf7642..f3561d9  master -> master\n```\n\n然后在克隆的 MainProject 中拉取远程服务器的修改\n```sh\n$ git pull\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 2 (delta 0), reused 2 (delta 0), pack-reused 0\nUnpacking objects: 100% (2/2), done.\nFrom https://github.com/username/MainProject\n   faf7642..f3561d9  master     -> origin/master\nFetching submodule DbConnector\nFrom https://github.com/username/DbConnector\n   42c390a..1a5f567  master     -> origin/master\nFailed to merge submodule DbConnector (merge following commits not found)\nAuto-merging DbConnector\nCONFLICT (submodule): Merge conflict in DbConnector\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n这样就出现和书中一样的结果了。\n\n\n","tags":["Pro Git","Git"]},{"title":"macOS 环境下，Virtualbox 安装 Win10 虚拟机，装了插件包，改了配置文件，USB 还是不能用","url":"/2020/04/27/macOS-环境下，Virtualbox-安装-Win10-虚拟机，装了插件包，改了配置文件，USB-还是不能用/","content":"\n## 问题\n查过了网上的绝大多数文章，Virtualbox 在 macOS 环境下安装 Win10 虚拟机 USB 不能用的解决办法，无非就是叫我们装插件包，然后改名字为 *group* 的配置文件，在文件里面找到`vboxusers:x:126:`并在后面添加自己的用户名，而我的配置文件里面没找到这行，所以只能自己加上`vboxusers:x:126:apple`，但是usb还是不能用。\n\n## 办法\n如果你装了插件，改了配置文件，但还是不能用，你就要注意配置文件中你写的那行的序号，比如`vboxusers:x:126:apple`,其实126这个数字不是固定，而是根据你这行所在位置定的，如果上一个是125，你这个就要写`vboxusers:x:126:apple`，如果上一个是270，你这个就要写`vboxusers:x:271:apple`，以此类推，当然 `apple` 用你的用户名替换。还有一个`usbfs:x:272:apple`也一样。我的配置文件是下面这样的。\n\n```\n_timed:*:266:\n_nearbyd:*:268:_nearbyd\n_reportmemoryexception:*:269:_reportmemoryexception\n_driverkit:*:270:_driverkit\nvboxusers:x:271:apple\nusbfs:x:272:apple\ncom.apple.access_ftp:*:395:\ncom.apple.access_disabled:*:396:\ncom.apple.access_sessionkey:*:397:\n```\n","tags":["macOS","Win10","VirtualBox","虚拟机","USB"]},{"title":"macOS 环境下配置 Derby 数据库","url":"/2020/04/25/macOS-环境下配置-Derby-数据库/","content":"\n打开终端，即 terminal。\n![terminal](/images/terminal.png)\n\n创建新的.bash_profile文件（如果有或创建过此文件，跳过此步骤）,输入\n ```sh\n touch ~/.bash_profile\n ```\n \n打开此文件,输入\n```sh \nopen -t ~/.bash_profile\n```\n\n先对环境变量进行解释：\n```\nJAVA_HOME: Java的安装路径（决定Java和Javac命令能不能用）；\nDERBY_HOME: Derby数据库的安装路径；\nPATH: 终端读取的路径（决定java -jar $DERBY_HOME/lib/derbyrun.jar server start能不能用）；\nCLASSPATH:class文件的安装路径（决定java org.apache.derby.tools.ij命令能不能用）；\n```\n\n接着继续，在刚打开的文件中添加Derby的环境变量。\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home\nexport DERBY_HOME=/Library/Java/db-derby-10.14.2.0-bin\nexport PATH=$JAVA_HOME/bin:$DERBY_HOME:.\nexport CLASSPATH=$DERBY_HOME/lib/derby.jar:$DERBY_HOME/lib/derbyclient.jar:$DERBY_HOME/lib/derbytools.jar:.\n```\n按cmd+s保存文件。 运行文件，使其生效，输入\n```sh\nsource  ~/.bash_profile\n```\n\n查看Derby信息，输入\n```sh\njava org.apache.derby.tools.sysinfo\n```\n如果弹出以下内容则说明配置成功\n```sh\n------------------ Java 信息 ------------------\nJava Version:    10.0.2\nJava Vendor:     Oracle Corporation\nJava home:       /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home/jre\nJava classpath:  /Users/me/src:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derby.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derby.war:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_cs.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_de_DE.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_es.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_fr.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_hu.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_it.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_ja_JP.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_ko_KR.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_pl.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_pt_BR.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_ru.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_zh_CN.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyLocale_zh_TW.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyclient.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbynet.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyoptionaltools.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbyrun.jar:/Users/me/sw/z/db-derby-10.14.2.0-bin/lib/derbytools.jar:/Users/me/sw/db2jcc/lib/db2jcc.jar:/Users/me/sw/db2jcc/lib/db2jcc_license_c.jar:/Users/me/sw/mysql/connectorj/mysql-connector-java-5.0.7/mysql-connector-java-5.0.7-bin.jar:/Users/me/sw/demo/jdbc.concurrent/jars/jdbc-concurrent.jar:/Users/me/sw/demo/tableFunctionWhitePaper/jars/vtis-example.jar\nOS name:         Mac OS X\nOS architecture: x64_64\nOS version:      10.11.5\nJava user name:  me\nJava user home:  /Users/me\nJava user dir:   /Users/me/derby/branches/10.14\njava.specification.name: Java Platform API Specification\njava.specification.version: 1.8\njava.runtime.version: 1.8.0-b132\n----------------- Derby 信息 ------------------\n[/Library/Java/db-derby-10.14.2.0-bin/lib/derby.jar] 10.14.2.0 - (1828579)\n[/Library/Java/db-derby-10.14.2.0-bin/lib/derbytools.jar] 10.14.2.0 - (1828579)\n---------------- 区域设置信息 ------------------\n```\n\n接着，启动ij环境，输入\n```sh\njava org.apache.derby.tools.ij\n```\n显示如下内容表示启动成功\n```sh\nij 版本 10.14\nij> \n```\n\n接着输入\n```sh\njava -jar $DERBY_HOME/lib/derbyrun.jar server start\n```\n\n启动Derby数据库服务器\n```sh\nMacBook:~ apple$ java -jar $DERBY_HOME/lib/derbyrun.jar server start\nFri Oct 05 16:28:00 CST 2018 : 已使用基本服务器安全策略安装了 Security Manager。\nFri Oct 05 16:28:22 CST 2018 : Apache Derby 网络服务器 - 10.14.2.0 - (1828579) 已启动并准备接受端口 1527 上的连接\n```\n到这里说明Derby数据库和服务器配置成功啦。\n","tags":["macOS","Derby","数据库"]},{"title":"My Dream in the New Era","url":"/2020/04/23/My-Dream-in-the-New-Era/","content":"As the rapid development of modern science and Internet technology, we are living in a new era, which features information appliance with information communicating and exchanging through Internet. President Xi proposed that we must strengthen the construction of information infrastructure, promote the deep integration of information resources and open up the \"big artery\" of information for economic and social development. Thus, creating and developing information technology help to build digital China. As a college student majoring in computer application technology in Information Engineering Department, I dream to be a software engineer.\n\nIn such information era, social economic structure in China centers on service industry, which aims at meeting the needs of people’s better life. In addition, knowledge innovation is the main trend of society development. I always consider how to apply the knowledge learned from my major to create useful and significant computer software to help people solve the problems in life or at work. At present, I have an idea to explore auto fire alarm software. So how did this idea come about? Last term, when I returned to school, I found a big fire in the mountain at the back of our dormitory building. In no time, high wind with dense smoke blew into our dormitory district. Immediately and urgently, I called 119. Then, the fireman on the phone asked me where it was. I was so nervous and spent a lot of effort to make it clear. As the mountain was too big, I couldn’t provide him with a very specific address. Finally, the firemen found the address and extinguished the fire. Afterwards, I wondered if there was any way for firemen to receive the locating map online in computer or smart phone. In such way, fire site could be chased immediately. Thus, I imagine creating auto fire alarm software. \n\nIn my imagination, the auto fire alarm software should possess the following function. Firstly, this software can capture the data of the weather, climate and geographical situation of the every location of the city at all times. Secondly, it can analyze the irregular data immediately according to the statistics of temperature, wind, air quality and so on. Thirdly, once the software inspects the irregular data of a location, it will automatically trigger a fire alarm by sending the GSP locating map of the fire to target receivers. The fire center can easily apply the software in the computer of the call center or smart phone of every fireman to receive the data. Every citizen should also install the software into smart phone so as to get informed of the fire or send the witnessed photos to the fire center. If this is achieved, it will greatly shorten the time of rescuing and evacuating the people in the fire spot.\n\nRealizing the significance of creating the auto fire alarm software, I am excited and eager to chase my dream right now. As a college student in grade one, I feel it crucial to master the core knowledge of software programming. In addition, I want to form an association at college to attract members who have great passion in this field. I also hope to receive support from my teachers to get precious supervision in the process of exploring the software of such kind.\n\n President Xi suggests that we roll up our sleeves and work with added energy to fulfill our dream. In the new era, I believe I can achieve my dream! I believe we can achieve our China Dream!","tags":["第六届岭南杯英语写作技能大赛","金笔奖"]},{"title":"ubuntu 环境下用 caps lock 切换输入法","url":"/2020/04/22/ubuntu-环境下用-caps-lock-切换输入法/","content":"\n## 安装 Gnome Tweak（已安装可跳过）\n打开 Terminal (终端），输入以下代码安装 Gnome Tweak\n```sh\nsudo apt-get install gnome-tweak-tool\n```\n安装过程中遇到下面这句话\n```sh\nDo you want to continue? [Y/n]\n```\n输入Y，按下回车即可继续安装。下面的命令如果遇到相同的情况，也是同样的操作，下文将不再赘述。\n如果应用程序中能找到以下图标，表示安装成功。``\n![tweaks](/images/tweaks.png)\n\n\n\n## 用 Gnome Tweak 把 caps lock 改成 menu 键\n打开 Tweaks，依次点击 Keyboard&Mouse -> Additional Layout Options\n![tweaks-keyboard-mouse](/images/tweaks-keyboard-mouse.png)\n\n续依次点击 Caps Lock behavior -> Make Caps Lock an additional Menu key，设置自动保存，关闭窗口即可。\n![additional-layout-options](/images/additional-layout-options.png)\n\n## 安装谷歌拼音输入法\n安装汉语语言包\n\n```sh\nsudo apt-get install language-pack-zh-hans\n```\n\n安装谷歌拼音输入法\n\n```sh\nsudo apt-get install fcitx-googlepinyin\n```\n\n打开 Language Support\n![language-support](/images/language-support.png)\n\n初次打开需要安装，点击install进行安装。\n![language-support-pop-up](/images/language-support-pop-up.png)\n\n在 Keyboard input method system: 中，选择fcitx。![fcitx](/images/fcitx.png)\n\n关闭窗口，重启系统后，任务栏右边图标出现键盘一样图标，就说明安装成功了。\n\n![task-bar](/images/task-bar.png)\n\n接下来，在应用程序中找到 Fcitx Config Tool，点击打开\n\n![fcitx-config-tool](/images/fcitx-config-tool.png)\n\n也可以用 Terminal 输入以下命令打开\n```sh\nfcitx-configtool\n```\n点击加号添加输入法\n![input-method-configuration](/images/input-method-configuration.png)\n\n\n去掉 Only Show Current Language 前面的勾，并在下面的搜索框输入 google，上面的框出现 Google Pinyin 后点击选中，点击 OK。\n\n![google-pinyin](/images/google-pinyin.png)\n点击 Global Config，点击下图编号为2的位置，接下来会有一个弹窗，这时按下键盘上的 caps lock 键，设置成功后的效果如下图所示。关闭窗口，即可使用 caps lock 切换输入法。\n![global-config](/images/global-config.png)\n\n","tags":["macOS","ubuntu","linux","caps lock","输入法切换"]}]